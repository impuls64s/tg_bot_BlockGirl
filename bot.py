import random
from config import API_TOKEN
from texts import FLIRT, COMPLIMENTS, STIKERS_BOMZH, QUIZ, HELP_CMD
import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text

# –í–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞
logging.basicConfig(level=logging.INFO)

# –ò—Ü–∏–Ω–∏—Ü–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ images
files_img = os.listdir('images/')


# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–æ—Ç–∞
def main_menu() -> types.ReplyKeyboardMarkup:
    main_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton('–§–ª–∏—Ä—Ç —Å –¥–∂–µ–Ω—Ç–µ–ª—å–º–µ–Ω–æ–º ü§≠')
    button2 = types.KeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç üòç')
    button3 = types.KeyboardButton('–ü–æ–∫–∞–∂–∏ —Ñ–æ—Ç–∫—É')
    button4 = types.KeyboardButton('–í–∏–∫—Ç–æ—Ä–∏–Ω–∞')
    main_kb.add(button1, button2).add(button3, button4)
    return main_kb


# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
results = dict()


# –í–°–ï –ö–û–ú–ê–ù–î–´ –ò MESSAGE_HANDLERS
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    '''
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    '''
    await message.reply(text=HELP_CMD,
                        reply_markup=main_menu(),
                        parse_mode="HTML")


@dp.message_handler(Text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
async def get_main_menu(message: types.Message):
    await message.reply(text='–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.', reply_markup=main_menu())


@dp.message_handler(Text('–ü–æ–∫–∞–∂–∏ —Ñ–æ—Ç–∫—É'))
async def send_img(message: types.Message):
    # –í—ã–±–æ—Ä —Ä–∞–Ω–¥–æ–º–Ω–æ–π —Ñ–æ—Ç–∫–∏ –∏–∑ –ø–∞–ø–∫–∏ images
    rand_img = random.choice(files_img)
    await bot.send_photo(chat_id=message.from_user.id,
                         photo=types.InputFile(f'images/{rand_img}'))


@dp.message_handler(Text('–§–ª–∏—Ä—Ç —Å –¥–∂–µ–Ω—Ç–µ–ª—å–º–µ–Ω–æ–º ü§≠'))
async def send_flirt(message: types.Message):
    # –†–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–ª–∏—Ä—Ç –∏–∑ texts.py
    rand_fl = random.choice(FLIRT)
    await message.answer(rand_fl)

    # –†–∞–Ω–¥–æ–º–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –∏–∑ texts.py
    rand_stick = random.choice(STIKERS_BOMZH)
    await bot.send_sticker(message.from_user.id, sticker=rand_stick)


@dp.message_handler(Text('–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç üòç'))
async def send_compliment(message: types.Message):
    # –†–∞–Ω–¥–æ–º–Ω—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –∏–∑ texts.py
    rand_comp = random.choice(COMPLIMENTS)
    await message.answer(rand_comp)

    # –†–∞–Ω–¥–æ–º–Ω–∞—è —Ñ–æ—Ç–∫–∞ –∏–∑ images
    rand_img = random.choice(files_img)
    await bot.send_photo(message.from_user.id,
                         photo=types.InputFile(f'images/{rand_img}'))


# –°–æ–∑–¥–∞–µ—Ç InlineKeyboardMarkup –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ
def create_ikb(answers: list, correct_answer: str) -> types.InlineKeyboardMarkup:
    '''
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ InlineKeyboardMarkup.
    –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤, –ø—Ä–∏—Å–≤–∞–∏–≤–∞—è callback_data='correct_answer'
    –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É, –∞ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º 'wrong_answer'.
    '''
    keyboard = types.InlineKeyboardMarkup()
    for answer in answers:
        if answer == correct_answer:
            button = types.InlineKeyboardButton(text=answer,
                                                callback_data='correct_answer')
        else:
            button = types.InlineKeyboardButton(text=answer,
                                                callback_data='wrong_answer')
        keyboard.add(button)
    return keyboard


@dp.message_handler(Text('–í–∏–∫—Ç–æ—Ä–∏–Ω–∞'))
async def start_quiz(message: types.Message):
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    start_quiz_kb = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text='–Ø –≥–æ—Ç–æ–≤–∞! –ù–∞—á–∏–Ω–∞–µ–º.',
                                        callback_data='correct_answer')
    start_quiz_kb.add(button)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    user_id = message.from_user.id
    results[user_id] = 0

    # –°–æ–∑–¥–∞–µ–º KeyboardButton –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    menu_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu_kb.add(types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))

    await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(QUIZ)}', reply_markup=menu_kb)
    await message.answer('–î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –æ—à–∏–±–æ–∫!!! –ò –ø–æ–ª—É—á–∏—à—å –ø–æ–¥–∞—Ä–æ–∫ üéÅ',
                         reply_markup=start_quiz_kb)


@dp.callback_query_handler(text='correct_answer')
async def get_question(callback_query: types.CallbackQuery):
    '''
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤,
    –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –µ–¥–µ–Ω–∏—Ü—É
    –∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.
    '''

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    user_id = callback_query.from_user.id
    number_correct_answers = results.get(user_id)

    # –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
    if number_correct_answers == 0:
        banner = '–°—Ç–∞—Ä—Ç—É–µ–º! –£–¥–∞—á–∏'
    else:
        banner = '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç'

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    if number_correct_answers < len(QUIZ):
        await callback_query.answer(banner)
        results[user_id] += 1

        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç—ã –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        question_text = QUIZ[number_correct_answers]["question"]
        answers = QUIZ[number_correct_answers]["answers"]
        correct_answer = QUIZ[number_correct_answers]["correct_answer"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é –Ω–∞–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = create_ikb(answers, correct_answer)

        # –ò–∑–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    text=question_text,
                                    reply_markup=keyboard)
    else:
        await callback_query.message.delete()
        await callback_query.message.answer('–¢—ã –ø—Ä–æ—à–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üëè, –ø–∞—Ä–µ–Ω—å –¥–æ–ª–∂–µ–Ω —Ç–µ–±–µ –ø–æ–¥–∞—Ä–æ–∫!',
                                            reply_markup=main_menu())


@dp.callback_query_handler(text='wrong_answer')
async def incorrect_ans(callback: types.CallbackQuery):
    '''
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤,
    —Ç—É—Ç –≤—Å–µ –ø—Ä–æ—Å—Ç–æ, –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤—ã—Ö–æ–¥–∏–º –≤ –≥–∞–ª–≤–Ω–æ–µ –º–µ–Ω—é.
    '''
    await callback.message.answer('–≠—Ç–æ –±—ã–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ë–æ–ª—å, –ø–µ—á–∞–ª—å, —Å–µ–≥–æ–¥–Ω—è –±–µ–∑ –ø–æ–¥–∞—Ä–∫–∞ üò¢',
                                  reply_markup=main_menu())
    await callback.message.delete()


@dp.message_handler()
async def echo(message: types.Message):
    '''
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    '''
    await message.answer(text='–ú–∞–¥–º—É–∞–∑–µ–ª—å –Ω–∞–∂–∏–º–∞–π–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫–∏))')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
