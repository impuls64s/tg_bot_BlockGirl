import os
import random
import logging

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text

from utils import random_photo, current_question
from texts import bot_answers, flirting, stikers, quiz
from keyboards import main_kb, start_quiz_kb, quiz_end_kb, answer_kb

load_dotenv()

logging.basicConfig(level=logging.INFO)

bot = Bot(token=os.getenv('API_TOKEN'))
dp = Dispatcher(bot)

# Keyboards
MAIN_KB = main_kb()
START_QUIZ_KB = start_quiz_kb()
END_QUIZ_KB = quiz_end_kb()

results = dict()


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.reply(text=bot_answers.HELP_CMD,
                        reply_markup=MAIN_KB,
                        parse_mode="HTML")


@dp.message_handler(Text('–ü–æ–∫–∞–∂–∏ —Ñ–æ—Ç–∫—É'))
async def send_photo(message: types.Message):
    await bot.send_photo(chat_id=message.from_user.id,
                         photo=types.InputFile(random_photo()))


@dp.message_handler(Text('–§–ª–∏—Ä—Ç —Å –¥–∂–µ–Ω—Ç–µ–ª—å–º–µ–Ω–æ–º ü§≠'))
async def send_flirt(message: types.Message):
    random_flirt = random.choice(flirting.FLIRT)
    await message.answer(random_flirt)

    random_sticker = random.choice(stikers.BUMS)
    await bot.send_sticker(message.from_user.id, sticker=random_sticker)


@dp.message_handler(Text('–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç üòç'))
async def send_compliment(message: types.Message):
    random_compliment = random.choice(flirting.COMPLIMENTS)
    await message.answer(random_compliment)

    await bot.send_photo(message.from_user.id,
                         photo=types.InputFile(random_photo()))


@dp.message_handler(Text('–í–∏–∫—Ç–æ—Ä–∏–Ω–∞'))
async def start_quiz(message: types.Message):
    await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(quiz.IT)}',
                         reply_markup=END_QUIZ_KB)
    await message.answer('–î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –æ—à–∏–±–æ–∫!!! –ò –ø–æ–ª—É—á–∏—à—å –ø–æ–¥–∞—Ä–æ–∫ üéÅ',
                         reply_markup=START_QUIZ_KB)


@dp.message_handler(Text('–ó–∞–∫–æ–Ω—á–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É'))
async def end_quiz(message: types.Message):
    await message.reply(text='–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.', reply_markup=MAIN_KB)


@dp.callback_query_handler(text='start_quiz')
async def first_question(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    results[user_id] = 0

    question_text, list_answers, correct_answer = current_question(0)
    keyboard = answer_kb(list_answers, correct_answer)

    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text=question_text,
                                reply_markup=keyboard)


@dp.callback_query_handler(text='correct_answer')
async def next_question(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    results[user_id] += 1
    number_correct_answers = results.get(user_id)
    nnq = number_correct_answers  # next number question

    if number_correct_answers < len(quiz.IT):
        await callback_query.answer(text='–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç')

        question_text, list_answers, correct_answer = current_question(nnq)
        keyboard = answer_kb(list_answers, correct_answer)

        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    text=question_text,
                                    reply_markup=keyboard)
    else:
        await callback_query.message.delete()
        await callback_query.message.answer('–¢—ã –ø—Ä–æ—à–ª–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üëè, –ø–∞—Ä–µ–Ω—å –¥–æ–ª–∂–µ–Ω —Ç–µ–±–µ –ø–æ–¥–∞—Ä–æ–∫!',
                                            reply_markup=MAIN_KB)


@dp.callback_query_handler(text='wrong_answer')
async def losing_quiz(callback: types.CallbackQuery):
    await callback.message.answer('–≠—Ç–æ –±—ã–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ë–æ–ª—å, –ø–µ—á–∞–ª—å, —Å–µ–≥–æ–¥–Ω—è –±–µ–∑ –ø–æ–¥–∞—Ä–∫–∞ üò¢',
                                  reply_markup=MAIN_KB)
    await callback.message.delete()


@dp.message_handler()
async def echo(message: types.Message):
    await message.answer(text='–ú–∞–¥–º—É–∞–∑–µ–ª—å –Ω–∞–∂–∏–º–∞–π–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫–∏))')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
